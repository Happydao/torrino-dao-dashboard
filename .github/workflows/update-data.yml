name: Update Treasury Data
on:
  schedule:
    - cron: '0 4 * * *'  # Esegue alle 04:00 UTC (05:00 in Italia CET)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.G_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install puppeteer axios dotenv
          npm install @solana/web3.js

      # ⬇️ Esegue gli script e genera logs.json + logs.txt senza jq
      - name: Run scripts and write logs.json + logs.txt
        env:
          G_TOKEN: ${{ secrets.G_TOKEN }}
          HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}
          TENSOR_API_KEY: ${{ secrets.TENSOR_API_KEY }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        shell: bash
        run: |
          set +e  # vogliamo salvare i log anche se uno script fallisce

          # 1) Esegui totalvalue.js e calculate.js catturando stdout/stderr ed exit code
          START="$(date -u +%FT%TZ)"

          OUT1="$(node scripts/totalvalue.js 2>&1)"; RC1=$?
          OUT2="$(node scripts/calculate.js 2>&1)"; RC2=$?

          END="$(date -u +%FT%TZ)"

          # 2) Genera i file con un piccolo script Node (niente jq/sed)
          cat > .github/write-logs.mjs <<'NODE'
          import fs from 'fs';

          const runId = Number(process.env.GITHUB_RUN_ID || '0');
          const startedAt = process.env.STARTED_AT || new Date().toISOString();
          const finishedAt = process.env.FINISHED_AT || new Date().toISOString();
          const out1 = process.env.OUT1 || '';
          const out2 = process.env.OUT2 || '';
          const rc1 = Number(process.env.RC1 || 1);
          const rc2 = Number(process.env.RC2 || 1);
          const ok = (rc1 === 0 && rc2 === 0);

          // maschera grezza di possibili token lunghi
          const mask = s => (s || '').replace(/[A-Za-z0-9_\-]{32,}/g, '[REDACTED]');

          const raw = [
            '=== Update Treasury Data ===',
            `Started at: ${startedAt}`,
            '',
            '----- totalvalue.js -----',
            mask(out1),
            '',
            '----- calculate.js -----',
            mask(out2),
            '',
            `Finished at: ${finishedAt}`,
            `Status: ${ok}`
          ].join('\n');

          // logs.txt (leggibile)
          fs.writeFileSync('logs.txt', raw, 'utf8');

          // logs.json (strutturato e INDENTATO)
          const payload = {
            runId,
            startedAt,
            finishedAt,
            ok,
            steps: [
              { name: 'totalvalue.js', exitCode: rc1, output: mask(out1) },
              { name: 'calculate.js', exitCode: rc2, output: mask(out2) }
            ],
            raw
          };
          fs.writeFileSync('logs.json', JSON.stringify(payload, null, 2), 'utf8');

          // copie storiche
          const tsSafe = startedAt.replace(/:/g, '-');
          fs.mkdirSync('logs', { recursive: true });
          fs.copyFileSync('logs.txt', `logs/${tsSafe}_run-${runId}.txt`);
          fs.copyFileSync('logs.json', `logs/${tsSafe}_run-${runId}.json`);
          NODE

          node .github/write-logs.mjs \
            STARTED_AT="$START" FINISHED_AT="$END" \
            OUT1="$OUT1" OUT2="$OUT2" RC1="$RC1" RC2="$RC2"

      - name: Check file changes
        run: |
          echo "📂 Anteprima logs.txt:"
          head -n 40 logs.txt || true
          echo ""
          echo "📂 Anteprima logs.json:"
          head -c 1000 logs.json || true
          echo ""
          echo "📂 Git status:"
          git status
        continue-on-error: true

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data.json logs.json logs.txt logs
          git commit -m "🔄 Aggiornamento tesoreria + logs.json + logs.txt" || echo "Nessun cambiamento da committare"
          git push origin main
