name: Update Treasury Data
on:
  schedule:
    - cron: '0 4 * * *'  # Esegue alle 04:00 UTC (05:00 in Italia CET)
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.G_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install puppeteer axios dotenv
          npm install @solana/web3.js
          sudo apt-get update && sudo apt-get install -y jq

      # ⬇️ Esegui gli script e genera logs.json (più copia storica opzionale)
      - name: Run Scripts and write logs.json
        env:
          G_TOKEN: ${{ secrets.G_TOKEN }}
          HELIUS_API_KEY: ${{ secrets.HELIUS_API_KEY }}
          TENSOR_API_KEY: ${{ secrets.TENSOR_API_KEY }}
        shell: bash
        run: |
          set +e  # non interrompere su errore: vogliamo comunque salvare il log
          START="$(date -u +%FT%TZ)"

          # Esegui i due script catturando output ed exit code
          OUT1="$(node scripts/totalvalue.js 2>&1)"; RC1=$?
          OUT2="$(node scripts/calculate.js 2>&1)"; RC2=$?

          END="$(date -u +%FT%TZ)"
          OK="false"; if [ "$RC1" -eq 0 ] && [ "$RC2" -eq 0 ]; then OK="true"; fi

          # Costruisci logs.json con struttura chiara
          jq -n \
            --arg runId "${GITHUB_RUN_ID}" \
            --arg startedAt "$START" \
            --arg finishedAt "$END" \
            --arg ok "$OK" \
            --arg out1 "$OUT1" --argjson rc1 "$RC1" \
            --arg out2 "$OUT2" --argjson rc2 "$RC2" \
            '{
              runId: ($runId|tonumber),
              startedAt: $startedAt,
              finishedAt: $finishedAt,
              ok: ($ok=="true"),
              steps: [
                { name: "totalvalue.js", exitCode: $rc1, output: $out1 },
                { name: "calculate.js", exitCode: $rc2, output: $out2 }
              ],
              raw: ("----- totalvalue.js -----\n" + $out1
                    + "\n\n----- calculate.js -----\n" + $out2)
            }' > logs.json

          # (Opzionale) copia storica con timestamp
          TS_SAFE="${START//:/-}"
          mkdir -p logs
          cp logs.json "logs/${TS_SAFE}_run-${GITHUB_RUN_ID}.json"

          # Stampa anteprima
          echo "📄 logs.json creato:"
          head -c 1000 logs.json || true
          echo -e "\n---- fine anteprima ----"

      - name: Check file changes
        run: |
          echo "📂 Anteprima data.json:"
          (head -c 1000 data.json 2>/dev/null || echo "data.json non trovato")
          echo ""
          echo "📂 Anteprima logs.json:"
          head -c 1000 logs.json
          echo ""
          echo "📂 File in logs/:"
          ls -lah logs || true
          echo ""
          echo "📂 Git status:"
          git status
        continue-on-error: true

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data.json logs.json logs
          git commit -m "🔄 Aggiornamento tesoreria + logs.json" || echo "Nessun cambiamento da committare"
          git push origin main
